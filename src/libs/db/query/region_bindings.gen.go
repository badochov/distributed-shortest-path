// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/badochov/distributed-shortest-path/src/libs/db/model"
)

func newRegionBinding(db *gorm.DB, opts ...gen.DOOption) regionBinding {
	_regionBinding := regionBinding{}

	_regionBinding.regionBindingDo.UseDB(db, opts...)
	_regionBinding.regionBindingDo.UseModel(&model.RegionBinding{})

	tableName := _regionBinding.regionBindingDo.TableName()
	_regionBinding.ALL = field.NewAsterisk(tableName)
	_regionBinding.VertexID = field.NewInt64(tableName, "vertex_id")
	_regionBinding.Region = field.NewUint16(tableName, "region")
	_regionBinding.Generation = field.NewUint16(tableName, "generation")
	_regionBinding.Vertex = regionBindingBelongsToVertex{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Vertex", "model.Vertex"),
	}

	_regionBinding.fillFieldMap()

	return _regionBinding
}

type regionBinding struct {
	regionBindingDo regionBindingDo

	ALL        field.Asterisk
	VertexID   field.Int64
	Region     field.Uint16
	Generation field.Uint16
	Vertex     regionBindingBelongsToVertex

	fieldMap map[string]field.Expr
}

func (r regionBinding) Table(newTableName string) *regionBinding {
	r.regionBindingDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r regionBinding) As(alias string) *regionBinding {
	r.regionBindingDo.DO = *(r.regionBindingDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *regionBinding) updateTableName(table string) *regionBinding {
	r.ALL = field.NewAsterisk(table)
	r.VertexID = field.NewInt64(table, "vertex_id")
	r.Region = field.NewUint16(table, "region")
	r.Generation = field.NewUint16(table, "generation")

	r.fillFieldMap()

	return r
}

func (r *regionBinding) WithContext(ctx context.Context) *regionBindingDo {
	return r.regionBindingDo.WithContext(ctx)
}

func (r regionBinding) TableName() string { return r.regionBindingDo.TableName() }

func (r regionBinding) Alias() string { return r.regionBindingDo.Alias() }

func (r *regionBinding) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *regionBinding) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 4)
	r.fieldMap["vertex_id"] = r.VertexID
	r.fieldMap["region"] = r.Region
	r.fieldMap["generation"] = r.Generation

}

func (r regionBinding) clone(db *gorm.DB) regionBinding {
	r.regionBindingDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r regionBinding) replaceDB(db *gorm.DB) regionBinding {
	r.regionBindingDo.ReplaceDB(db)
	return r
}

type regionBindingBelongsToVertex struct {
	db *gorm.DB

	field.RelationField
}

func (a regionBindingBelongsToVertex) Where(conds ...field.Expr) *regionBindingBelongsToVertex {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a regionBindingBelongsToVertex) WithContext(ctx context.Context) *regionBindingBelongsToVertex {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a regionBindingBelongsToVertex) Model(m *model.RegionBinding) *regionBindingBelongsToVertexTx {
	return &regionBindingBelongsToVertexTx{a.db.Model(m).Association(a.Name())}
}

type regionBindingBelongsToVertexTx struct{ tx *gorm.Association }

func (a regionBindingBelongsToVertexTx) Find() (result *model.Vertex, err error) {
	return result, a.tx.Find(&result)
}

func (a regionBindingBelongsToVertexTx) Append(values ...*model.Vertex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a regionBindingBelongsToVertexTx) Replace(values ...*model.Vertex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a regionBindingBelongsToVertexTx) Delete(values ...*model.Vertex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a regionBindingBelongsToVertexTx) Clear() error {
	return a.tx.Clear()
}

func (a regionBindingBelongsToVertexTx) Count() int64 {
	return a.tx.Count()
}

type regionBindingDo struct{ gen.DO }

func (r regionBindingDo) Debug() *regionBindingDo {
	return r.withDO(r.DO.Debug())
}

func (r regionBindingDo) WithContext(ctx context.Context) *regionBindingDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r regionBindingDo) ReadDB() *regionBindingDo {
	return r.Clauses(dbresolver.Read)
}

func (r regionBindingDo) WriteDB() *regionBindingDo {
	return r.Clauses(dbresolver.Write)
}

func (r regionBindingDo) Session(config *gorm.Session) *regionBindingDo {
	return r.withDO(r.DO.Session(config))
}

func (r regionBindingDo) Clauses(conds ...clause.Expression) *regionBindingDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r regionBindingDo) Returning(value interface{}, columns ...string) *regionBindingDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r regionBindingDo) Not(conds ...gen.Condition) *regionBindingDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r regionBindingDo) Or(conds ...gen.Condition) *regionBindingDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r regionBindingDo) Select(conds ...field.Expr) *regionBindingDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r regionBindingDo) Where(conds ...gen.Condition) *regionBindingDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r regionBindingDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *regionBindingDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r regionBindingDo) Order(conds ...field.Expr) *regionBindingDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r regionBindingDo) Distinct(cols ...field.Expr) *regionBindingDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r regionBindingDo) Omit(cols ...field.Expr) *regionBindingDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r regionBindingDo) Join(table schema.Tabler, on ...field.Expr) *regionBindingDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r regionBindingDo) LeftJoin(table schema.Tabler, on ...field.Expr) *regionBindingDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r regionBindingDo) RightJoin(table schema.Tabler, on ...field.Expr) *regionBindingDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r regionBindingDo) Group(cols ...field.Expr) *regionBindingDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r regionBindingDo) Having(conds ...gen.Condition) *regionBindingDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r regionBindingDo) Limit(limit int) *regionBindingDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r regionBindingDo) Offset(offset int) *regionBindingDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r regionBindingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *regionBindingDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r regionBindingDo) Unscoped() *regionBindingDo {
	return r.withDO(r.DO.Unscoped())
}

func (r regionBindingDo) Create(values ...*model.RegionBinding) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r regionBindingDo) CreateInBatches(values []*model.RegionBinding, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r regionBindingDo) Save(values ...*model.RegionBinding) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r regionBindingDo) First() (*model.RegionBinding, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegionBinding), nil
	}
}

func (r regionBindingDo) Take() (*model.RegionBinding, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegionBinding), nil
	}
}

func (r regionBindingDo) Last() (*model.RegionBinding, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegionBinding), nil
	}
}

func (r regionBindingDo) Find() ([]*model.RegionBinding, error) {
	result, err := r.DO.Find()
	return result.([]*model.RegionBinding), err
}

func (r regionBindingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RegionBinding, err error) {
	buf := make([]*model.RegionBinding, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r regionBindingDo) FindInBatches(result *[]*model.RegionBinding, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r regionBindingDo) Attrs(attrs ...field.AssignExpr) *regionBindingDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r regionBindingDo) Assign(attrs ...field.AssignExpr) *regionBindingDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r regionBindingDo) Joins(fields ...field.RelationField) *regionBindingDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r regionBindingDo) Preload(fields ...field.RelationField) *regionBindingDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r regionBindingDo) FirstOrInit() (*model.RegionBinding, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegionBinding), nil
	}
}

func (r regionBindingDo) FirstOrCreate() (*model.RegionBinding, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegionBinding), nil
	}
}

func (r regionBindingDo) FindByPage(offset int, limit int) (result []*model.RegionBinding, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r regionBindingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r regionBindingDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r regionBindingDo) Delete(models ...*model.RegionBinding) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *regionBindingDo) withDO(do gen.Dao) *regionBindingDo {
	r.DO = *do.(*gen.DO)
	return r
}
