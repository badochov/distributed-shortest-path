// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/badochov/distributed-shortest-path/src/libs/db/model"
)

func newEdge(db *gorm.DB, opts ...gen.DOOption) edge {
	_edge := edge{}

	_edge.edgeDo.UseDB(db, opts...)
	_edge.edgeDo.UseModel(&model.Edge{})

	tableName := _edge.edgeDo.TableName()
	_edge.ALL = field.NewAsterisk(tableName)
	_edge.ID = field.NewInt64(tableName, "id")
	_edge.FromId = field.NewInt64(tableName, "from_id")
	_edge.ToId = field.NewInt64(tableName, "to_id")
	_edge.Generation = field.NewUint16(tableName, "generation")
	_edge.From = edgeBelongsToFrom{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("From", "model.Vertex"),
	}

	_edge.To = edgeBelongsToTo{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("To", "model.Vertex"),
	}

	_edge.fillFieldMap()

	return _edge
}

type edge struct {
	edgeDo edgeDo

	ALL        field.Asterisk
	ID         field.Int64
	FromId     field.Int64
	ToId       field.Int64
	Generation field.Uint16
	From       edgeBelongsToFrom

	To edgeBelongsToTo

	fieldMap map[string]field.Expr
}

func (e edge) Table(newTableName string) *edge {
	e.edgeDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e edge) As(alias string) *edge {
	e.edgeDo.DO = *(e.edgeDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *edge) updateTableName(table string) *edge {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.FromId = field.NewInt64(table, "from_id")
	e.ToId = field.NewInt64(table, "to_id")
	e.Generation = field.NewUint16(table, "generation")

	e.fillFieldMap()

	return e
}

func (e *edge) WithContext(ctx context.Context) *edgeDo { return e.edgeDo.WithContext(ctx) }

func (e edge) TableName() string { return e.edgeDo.TableName() }

func (e edge) Alias() string { return e.edgeDo.Alias() }

func (e *edge) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *edge) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["id"] = e.ID
	e.fieldMap["from_id"] = e.FromId
	e.fieldMap["to_id"] = e.ToId
	e.fieldMap["generation"] = e.Generation

}

func (e edge) clone(db *gorm.DB) edge {
	e.edgeDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e edge) replaceDB(db *gorm.DB) edge {
	e.edgeDo.ReplaceDB(db)
	return e
}

type edgeBelongsToFrom struct {
	db *gorm.DB

	field.RelationField
}

func (a edgeBelongsToFrom) Where(conds ...field.Expr) *edgeBelongsToFrom {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a edgeBelongsToFrom) WithContext(ctx context.Context) *edgeBelongsToFrom {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a edgeBelongsToFrom) Model(m *model.Edge) *edgeBelongsToFromTx {
	return &edgeBelongsToFromTx{a.db.Model(m).Association(a.Name())}
}

type edgeBelongsToFromTx struct{ tx *gorm.Association }

func (a edgeBelongsToFromTx) Find() (result *model.Vertex, err error) {
	return result, a.tx.Find(&result)
}

func (a edgeBelongsToFromTx) Append(values ...*model.Vertex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a edgeBelongsToFromTx) Replace(values ...*model.Vertex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a edgeBelongsToFromTx) Delete(values ...*model.Vertex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a edgeBelongsToFromTx) Clear() error {
	return a.tx.Clear()
}

func (a edgeBelongsToFromTx) Count() int64 {
	return a.tx.Count()
}

type edgeBelongsToTo struct {
	db *gorm.DB

	field.RelationField
}

func (a edgeBelongsToTo) Where(conds ...field.Expr) *edgeBelongsToTo {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a edgeBelongsToTo) WithContext(ctx context.Context) *edgeBelongsToTo {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a edgeBelongsToTo) Model(m *model.Edge) *edgeBelongsToToTx {
	return &edgeBelongsToToTx{a.db.Model(m).Association(a.Name())}
}

type edgeBelongsToToTx struct{ tx *gorm.Association }

func (a edgeBelongsToToTx) Find() (result *model.Vertex, err error) {
	return result, a.tx.Find(&result)
}

func (a edgeBelongsToToTx) Append(values ...*model.Vertex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a edgeBelongsToToTx) Replace(values ...*model.Vertex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a edgeBelongsToToTx) Delete(values ...*model.Vertex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a edgeBelongsToToTx) Clear() error {
	return a.tx.Clear()
}

func (a edgeBelongsToToTx) Count() int64 {
	return a.tx.Count()
}

type edgeDo struct{ gen.DO }

func (e edgeDo) Debug() *edgeDo {
	return e.withDO(e.DO.Debug())
}

func (e edgeDo) WithContext(ctx context.Context) *edgeDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e edgeDo) ReadDB() *edgeDo {
	return e.Clauses(dbresolver.Read)
}

func (e edgeDo) WriteDB() *edgeDo {
	return e.Clauses(dbresolver.Write)
}

func (e edgeDo) Session(config *gorm.Session) *edgeDo {
	return e.withDO(e.DO.Session(config))
}

func (e edgeDo) Clauses(conds ...clause.Expression) *edgeDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e edgeDo) Returning(value interface{}, columns ...string) *edgeDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e edgeDo) Not(conds ...gen.Condition) *edgeDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e edgeDo) Or(conds ...gen.Condition) *edgeDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e edgeDo) Select(conds ...field.Expr) *edgeDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e edgeDo) Where(conds ...gen.Condition) *edgeDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e edgeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *edgeDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e edgeDo) Order(conds ...field.Expr) *edgeDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e edgeDo) Distinct(cols ...field.Expr) *edgeDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e edgeDo) Omit(cols ...field.Expr) *edgeDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e edgeDo) Join(table schema.Tabler, on ...field.Expr) *edgeDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e edgeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *edgeDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e edgeDo) RightJoin(table schema.Tabler, on ...field.Expr) *edgeDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e edgeDo) Group(cols ...field.Expr) *edgeDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e edgeDo) Having(conds ...gen.Condition) *edgeDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e edgeDo) Limit(limit int) *edgeDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e edgeDo) Offset(offset int) *edgeDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e edgeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *edgeDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e edgeDo) Unscoped() *edgeDo {
	return e.withDO(e.DO.Unscoped())
}

func (e edgeDo) Create(values ...*model.Edge) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e edgeDo) CreateInBatches(values []*model.Edge, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e edgeDo) Save(values ...*model.Edge) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e edgeDo) First() (*model.Edge, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Edge), nil
	}
}

func (e edgeDo) Take() (*model.Edge, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Edge), nil
	}
}

func (e edgeDo) Last() (*model.Edge, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Edge), nil
	}
}

func (e edgeDo) Find() ([]*model.Edge, error) {
	result, err := e.DO.Find()
	return result.([]*model.Edge), err
}

func (e edgeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Edge, err error) {
	buf := make([]*model.Edge, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e edgeDo) FindInBatches(result *[]*model.Edge, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e edgeDo) Attrs(attrs ...field.AssignExpr) *edgeDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e edgeDo) Assign(attrs ...field.AssignExpr) *edgeDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e edgeDo) Joins(fields ...field.RelationField) *edgeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e edgeDo) Preload(fields ...field.RelationField) *edgeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e edgeDo) FirstOrInit() (*model.Edge, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Edge), nil
	}
}

func (e edgeDo) FirstOrCreate() (*model.Edge, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Edge), nil
	}
}

func (e edgeDo) FindByPage(offset int, limit int) (result []*model.Edge, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e edgeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e edgeDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e edgeDo) Delete(models ...*model.Edge) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *edgeDo) withDO(do gen.Dao) *edgeDo {
	e.DO = *do.(*gen.DO)
	return e
}
