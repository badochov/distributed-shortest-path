// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/badochov/distributed-shortest-path/src/libs/db/model"
)

func newArcFlag(db *gorm.DB, opts ...gen.DOOption) arcFlag {
	_arcFlag := arcFlag{}

	_arcFlag.arcFlagDo.UseDB(db, opts...)
	_arcFlag.arcFlagDo.UseModel(&model.ArcFlag{})

	tableName := _arcFlag.arcFlagDo.TableName()
	_arcFlag.ALL = field.NewAsterisk(tableName)
	_arcFlag.ID = field.NewUint(tableName, "id")
	_arcFlag.EdgeId = field.NewInt64(tableName, "edge_id")
	_arcFlag.Flag = field.NewUint64(tableName, "flag")
	_arcFlag.Generation = field.NewUint16(tableName, "generation")
	_arcFlag.Edge = arcFlagBelongsToEdge{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Edge", "model.Edge"),
		From: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Edge.From", "model.Vertex"),
		},
		To: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Edge.To", "model.Vertex"),
		},
	}

	_arcFlag.fillFieldMap()

	return _arcFlag
}

type arcFlag struct {
	arcFlagDo arcFlagDo

	ALL        field.Asterisk
	ID         field.Uint
	EdgeId     field.Int64
	Flag       field.Uint64
	Generation field.Uint16
	Edge       arcFlagBelongsToEdge

	fieldMap map[string]field.Expr
}

func (a arcFlag) Table(newTableName string) *arcFlag {
	a.arcFlagDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a arcFlag) As(alias string) *arcFlag {
	a.arcFlagDo.DO = *(a.arcFlagDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *arcFlag) updateTableName(table string) *arcFlag {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.EdgeId = field.NewInt64(table, "edge_id")
	a.Flag = field.NewUint64(table, "flag")
	a.Generation = field.NewUint16(table, "generation")

	a.fillFieldMap()

	return a
}

func (a *arcFlag) WithContext(ctx context.Context) *arcFlagDo { return a.arcFlagDo.WithContext(ctx) }

func (a arcFlag) TableName() string { return a.arcFlagDo.TableName() }

func (a arcFlag) Alias() string { return a.arcFlagDo.Alias() }

func (a *arcFlag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *arcFlag) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["id"] = a.ID
	a.fieldMap["edge_id"] = a.EdgeId
	a.fieldMap["flag"] = a.Flag
	a.fieldMap["generation"] = a.Generation

}

func (a arcFlag) clone(db *gorm.DB) arcFlag {
	a.arcFlagDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a arcFlag) replaceDB(db *gorm.DB) arcFlag {
	a.arcFlagDo.ReplaceDB(db)
	return a
}

type arcFlagBelongsToEdge struct {
	db *gorm.DB

	field.RelationField

	From struct {
		field.RelationField
	}
	To struct {
		field.RelationField
	}
}

func (a arcFlagBelongsToEdge) Where(conds ...field.Expr) *arcFlagBelongsToEdge {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a arcFlagBelongsToEdge) WithContext(ctx context.Context) *arcFlagBelongsToEdge {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a arcFlagBelongsToEdge) Model(m *model.ArcFlag) *arcFlagBelongsToEdgeTx {
	return &arcFlagBelongsToEdgeTx{a.db.Model(m).Association(a.Name())}
}

type arcFlagBelongsToEdgeTx struct{ tx *gorm.Association }

func (a arcFlagBelongsToEdgeTx) Find() (result *model.Edge, err error) {
	return result, a.tx.Find(&result)
}

func (a arcFlagBelongsToEdgeTx) Append(values ...*model.Edge) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a arcFlagBelongsToEdgeTx) Replace(values ...*model.Edge) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a arcFlagBelongsToEdgeTx) Delete(values ...*model.Edge) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a arcFlagBelongsToEdgeTx) Clear() error {
	return a.tx.Clear()
}

func (a arcFlagBelongsToEdgeTx) Count() int64 {
	return a.tx.Count()
}

type arcFlagDo struct{ gen.DO }

func (a arcFlagDo) Debug() *arcFlagDo {
	return a.withDO(a.DO.Debug())
}

func (a arcFlagDo) WithContext(ctx context.Context) *arcFlagDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a arcFlagDo) ReadDB() *arcFlagDo {
	return a.Clauses(dbresolver.Read)
}

func (a arcFlagDo) WriteDB() *arcFlagDo {
	return a.Clauses(dbresolver.Write)
}

func (a arcFlagDo) Session(config *gorm.Session) *arcFlagDo {
	return a.withDO(a.DO.Session(config))
}

func (a arcFlagDo) Clauses(conds ...clause.Expression) *arcFlagDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a arcFlagDo) Returning(value interface{}, columns ...string) *arcFlagDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a arcFlagDo) Not(conds ...gen.Condition) *arcFlagDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a arcFlagDo) Or(conds ...gen.Condition) *arcFlagDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a arcFlagDo) Select(conds ...field.Expr) *arcFlagDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a arcFlagDo) Where(conds ...gen.Condition) *arcFlagDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a arcFlagDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *arcFlagDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a arcFlagDo) Order(conds ...field.Expr) *arcFlagDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a arcFlagDo) Distinct(cols ...field.Expr) *arcFlagDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a arcFlagDo) Omit(cols ...field.Expr) *arcFlagDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a arcFlagDo) Join(table schema.Tabler, on ...field.Expr) *arcFlagDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a arcFlagDo) LeftJoin(table schema.Tabler, on ...field.Expr) *arcFlagDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a arcFlagDo) RightJoin(table schema.Tabler, on ...field.Expr) *arcFlagDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a arcFlagDo) Group(cols ...field.Expr) *arcFlagDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a arcFlagDo) Having(conds ...gen.Condition) *arcFlagDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a arcFlagDo) Limit(limit int) *arcFlagDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a arcFlagDo) Offset(offset int) *arcFlagDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a arcFlagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *arcFlagDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a arcFlagDo) Unscoped() *arcFlagDo {
	return a.withDO(a.DO.Unscoped())
}

func (a arcFlagDo) Create(values ...*model.ArcFlag) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a arcFlagDo) CreateInBatches(values []*model.ArcFlag, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a arcFlagDo) Save(values ...*model.ArcFlag) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a arcFlagDo) First() (*model.ArcFlag, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArcFlag), nil
	}
}

func (a arcFlagDo) Take() (*model.ArcFlag, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArcFlag), nil
	}
}

func (a arcFlagDo) Last() (*model.ArcFlag, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArcFlag), nil
	}
}

func (a arcFlagDo) Find() ([]*model.ArcFlag, error) {
	result, err := a.DO.Find()
	return result.([]*model.ArcFlag), err
}

func (a arcFlagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ArcFlag, err error) {
	buf := make([]*model.ArcFlag, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a arcFlagDo) FindInBatches(result *[]*model.ArcFlag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a arcFlagDo) Attrs(attrs ...field.AssignExpr) *arcFlagDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a arcFlagDo) Assign(attrs ...field.AssignExpr) *arcFlagDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a arcFlagDo) Joins(fields ...field.RelationField) *arcFlagDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a arcFlagDo) Preload(fields ...field.RelationField) *arcFlagDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a arcFlagDo) FirstOrInit() (*model.ArcFlag, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArcFlag), nil
	}
}

func (a arcFlagDo) FirstOrCreate() (*model.ArcFlag, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ArcFlag), nil
	}
}

func (a arcFlagDo) FindByPage(offset int, limit int) (result []*model.ArcFlag, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a arcFlagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a arcFlagDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a arcFlagDo) Delete(models ...*model.ArcFlag) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *arcFlagDo) withDO(do gen.Dao) *arcFlagDo {
	a.DO = *do.(*gen.DO)
	return a
}
